{"version":3,"sources":["webpack:///./src/api/depoolsGiversUsers.js","webpack:///./src/components/DepoolsGiversUsers.vue","webpack:///src/components/DepoolsGiversUsers.vue","webpack:///./src/components/DepoolsGiversUsers.vue?c135","webpack:///./node_modules/comma-number/index.js","webpack:///./src/api/utils.js"],"names":["require","AggregationFn","client","commaNumber","utils","depoolsGiversUsers","Depools","type","collection","fields","field","fn","SUM","filter","code_hash","in","depoolCodeHash","electorCodeHash","Givers","id","Total","operations","net","batch_query","response","DepoolsAssets","Math","round","results","oneTon","GiversAssets","TotalAssets","UsersAssets","DepoolsAssetsPersents","GiversAssetsPersents","UsersAssetsPersents","assets","labels","console","log","module","exports","render","staticRenderFns","extends","data","options","responsive","maintainAspectRatio","title","display","text","fontSize","fontStyle","component","inputNumber","optionalSeparator","optionalDecimalChar","decimalChar","stringNumber","number","length","Number","replace","String","isInteger","isNaN","isFinite","decimalIndex","lastIndexOf","decimal","slice","parts","parse","push","join","string","separator","i","strings","substr","bindWith","oneDay","oneWeek","oneMonth","surfCodeHash","now","Date"],"mappings":"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","file":"js/chunk-ccb19f80.3c244e44.js","sourcesContent":["\nconst { AggregationFn, client } = require(\"./client/webClient\");\nconst commaNumber = require('comma-number');\nconst utils = require('./utils');\n\nconst depoolsGiversUsers = async () => {\n    const Depools =\n    {\n        type: \"AggregateCollection\",\n        collection: \"accounts\",\n        fields: [\n            {\n                field: \"balance\",\n                fn: AggregationFn.SUM\n            }\n        ],\n        filter: {\n            code_hash: {\n                in: [\n                    utils.depoolCodeHash,\n                    utils.electorCodeHash\n                ]\n            }\n        }\n    };\n    const Givers =\n    {\n        type: \"AggregateCollection\",\n        collection: \"accounts\",\n        fields: [\n            {\n                field: \"balance\",\n                fn: AggregationFn.SUM\n            }\n        ],\n        filter: {\n            id: {\n                in: [\n                    \"-1:7777777777777777777777777777777777777777777777777777777777777777\",\n                    \"-1:8888888888888888888888888888888888888888888888888888888888888888\",\n                    \"-1:9999999999999999999999999999999999999999999999999999999999999999\"\n                ]\n            }\n        }\n    }\n\n    const Total = {\n        type: \"AggregateCollection\",\n        collection: \"accounts\",\n        fields: [\n            {\n                field: \"balance\",\n                fn: AggregationFn.SUM\n            }\n        ]\n    }\n\n    const operations = [Depools, Givers, Total];\n\n    try {\n        const response = await client.net.batch_query({\n            operations\n        });        \n        const DepoolsAssets = Math.round(response.results[0][0] / utils.oneTon);\n        const GiversAssets = Math.round(response.results[1][0] / utils.oneTon);\n        const TotalAssets = Math.round(response.results[2][0] / utils.oneTon);\n        const UsersAssets = TotalAssets - GiversAssets - DepoolsAssets;\n\n        const DepoolsAssetsPersents = Math.round(DepoolsAssets / TotalAssets * 100);\n        const GiversAssetsPersents = Math.round(GiversAssets / TotalAssets * 100);\n        const UsersAssetsPersents = Math.round(UsersAssets / TotalAssets * 100);\n        return {\n            assets: [\n                DepoolsAssets,\n                GiversAssets,\n                UsersAssets\n            ],\n            labels: [\n                `DEPOOLS: ${commaNumber(DepoolsAssets)} TON (${DepoolsAssetsPersents})%`,\n                `GIVERS: ${commaNumber(GiversAssets)} TON (${GiversAssetsPersents})%`,\n                `FREE CIRCULATION: ${commaNumber(UsersAssets)} TON (${UsersAssetsPersents})%`\n            ]\n        }\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nmodule.exports = {\n    depoolsGiversUsers\n}","var render, staticRenderFns\nimport script from \"./DepoolsGiversUsers.vue?vue&type=script&lang=js&\"\nexport * from \"./DepoolsGiversUsers.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\nimport { Pie } from \"vue-chartjs\";\nimport { depoolsGiversUsers } from \"../api/depoolsGiversUsers\";\nexport default {\n  extends: Pie,\n  data() {\n    return {\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: true,\n          text: \"All assets in TON\",\n          fontSize: 25,\n          fontStyle: \"normal\",\n        },\n      },\n    };\n  },\n  async mounted() {     \n    const data = await depoolsGiversUsers();        \n      this.renderChart(\n      {\n        labels: data.labels,\n        datasets: [\n          {\n            label: \"All assets in TON: Depools, Givers, Free circulation\",\n            backgroundColor: [\"green\", \"blue\", \"red\"],\n            data: data.assets,\n          },\n        ],\n      },\n      this.options\n    );\n  },\n};\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DepoolsGiversUsers.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DepoolsGiversUsers.vue?vue&type=script&lang=js&\"","'use strict'\n\n// return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n\n  // default `decimalChar` is a period\n  const decimalChar = optionalDecimalChar || '.'\n\n  let stringNumber // we assign this in the switch block and need it later.\n\n  {\n    let number // we assign this in the switch block and need it right after.\n\n    switch (typeof inputNumber) {\n\n      case 'string':\n\n        // if there aren't enough digits to need separators then return it\n        // NOTE: some numbers which are too small will get passed this\n        //       when they have decimal values which make them too long here.\n        //       but, the number value check after this switch will catch it.\n        if (inputNumber.length < (inputNumber[0] === '-' ? 5 : 4)) {\n          return inputNumber\n        }\n\n        // remember it as a string in `stringNumber` and convert to a Number\n        stringNumber = inputNumber\n\n        // if they're not using the Node standard decimal char then replace it\n        // before converting.\n        number = Number(\n          (decimalChar !== '.') ? stringNumber.replace(decimalChar, '.') : stringNumber\n        )\n        break\n\n      // convert to a string.\n      // NOTE: don't check if the number is too small before converting\n      //       because we'll need to return `stringNumber` anyway.\n      case 'number':\n        stringNumber = String(inputNumber)\n        number       = inputNumber\n        // create the string version with the decimalChar they specified.\n        // this matches what the above case 'string' produces,\n        // and, fixes the bug *not* doing this caused.\n        if ('.' !== decimalChar && !Number.isInteger(inputNumber)) {\n          stringNumber = stringNumber.replace('.', decimalChar)\n        }\n        break\n\n      // return invalid type as-is\n      default: return inputNumber\n    }\n\n    // when it doesn't need a separator or isn't a number then return it\n    if ((-1000 < number && number < 1000) || isNaN(number) || !isFinite(number)) {\n      return stringNumber\n    }\n  }\n\n  {\n    // strip off decimal value to add back in later\n    const decimalIndex = stringNumber.lastIndexOf(decimalChar)\n    let decimal\n    if (decimalIndex > -1) {\n      decimal = stringNumber.slice(decimalIndex)\n      stringNumber = stringNumber.slice(0, decimalIndex)\n    }\n\n    // finally, parse the string. Note, default 'separator' is a comma.\n    const parts = parse(stringNumber, optionalSeparator || ',')\n\n    // if there's a decimal value then add it to the parts.\n    if (decimal) {// NOTE: we sliced() it off including the decimalChar\n      parts.push(decimal)\n    }\n\n    // combine all parts for the final string (note, has separators).\n    return parts.join('')\n  }\n}\n\nfunction parse(string, separator) {\n\n  // find first index to split the string at (where 1st separator goes).\n  let i = ((string.length - 1) % 3) + 1\n\n  // above calculation is wrong when num is negative and a certain size.\n  if (i === 1 && (string[0] === '-')) {\n    i = 4  // example: -123,456,789  start at 4, not 1.\n  }\n\n  const strings = [ // holds the string parts\n    string.slice(0, i) // grab part before the first separator\n  ]\n\n  // split remaining string in groups of 3 where a separator belongs\n  for (; i < string.length; i += 3) {\n    strings.push(separator, string.substr(i, 3))\n  }\n\n  return strings\n}\n\n\n// convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\nfunction bindWith(separator, decimalChar) {\n  return function(number) {\n    return commaNumber(number, separator, decimalChar)\n  }\n}\n\nmodule.exports = commaNumber\nmodule.exports.bindWith = bindWith\n","const oneTon = 1_000_000_000;\nconst oneDay = 24 * 60 * 60;\nconst oneWeek = 7 * oneDay;\nconst oneMonth = Math.round(30.5 * oneDay);\nconst surfCodeHash = \"207dc560c5956de1a2c1479356f8f3ee70a59767db2bf4788b1d61ad42cdad82\";\nconst depoolCodeHash = \"14e20e304f53e6da152eb95fffc993dbd28245a775d847eed043f7c78a503885\";\nconst electorCodeHash = \"e48892fa8be43954a2923d668ff9e8d68931c82d8dc80be1c8848b8ae8fe366a\";\nconst now = Math.round(Date.now() / 1000);\n\nmodule.exports = {\n    oneTon,\n    oneDay,\n    oneWeek,\n    oneMonth,\n    surfCodeHash,\n    depoolCodeHash,\n    electorCodeHash,\n    now\n}"],"sourceRoot":""}